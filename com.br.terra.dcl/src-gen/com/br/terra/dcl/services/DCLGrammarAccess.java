/*
 * generated by Xtext
 */
package com.br.terra.dcl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DCLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchitecturalElementsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStructureElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStructureElementsDCLStructureElementParserRuleCall_2_0 = (RuleCall)cStructureElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRestrictionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDCDeclAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDCDeclDCDeclParserRuleCall_6_0 = (RuleCall)cDCDeclAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Model:
		//	'architecturalElements' '{' structureElements+=DCLStructureElement+ '}'
		//	'restrictions' '{' dCDecl+=DCDecl* '}';
		@Override public ParserRule getRule() { return rule; }

		//'architecturalElements' '{' structureElements+=DCLStructureElement+ '}' 'restrictions' '{' dCDecl+=DCDecl* '}'
		public Group getGroup() { return cGroup; }

		//'architecturalElements'
		public Keyword getArchitecturalElementsKeyword_0() { return cArchitecturalElementsKeyword_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//structureElements+=DCLStructureElement+
		public Assignment getStructureElementsAssignment_2() { return cStructureElementsAssignment_2; }

		//DCLStructureElement
		public RuleCall getStructureElementsDCLStructureElementParserRuleCall_2_0() { return cStructureElementsDCLStructureElementParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//'restrictions'
		public Keyword getRestrictionsKeyword_4() { return cRestrictionsKeyword_4; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//dCDecl+=DCDecl*
		public Assignment getDCDeclAssignment_6() { return cDCDeclAssignment_6; }

		//DCDecl
		public RuleCall getDCDeclDCDeclParserRuleCall_6_0() { return cDCDeclDCDeclParserRuleCall_6_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class DCLStructureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLStructureElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDCLManagedSubsystemParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDCLManagingSubsystemParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDCLMonitorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDCLPlannerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDCLAnalyzerParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDCLExecutorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDCLSensorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDCLActuatorParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDCLKnowledgeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDCLReferencesParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cDCLLayerParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cDCLComponentParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cDCLSubSystemParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cDCLModuleParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cDCLComponentInterfaceParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//DCLStructureElement:
		//	DCLManagedSubsystem | DCLManagingSubsystem | DCLMonitor | DCLPlanner | DCLAnalyzer | DCLExecutor | DCLSensor |
		//	DCLActuator | DCLKnowledge | DCLReferences | DCLLayer | DCLComponent | DCLSubSystem | DCLModule |
		//	DCLComponentInterface;
		@Override public ParserRule getRule() { return rule; }

		//DCLManagedSubsystem | DCLManagingSubsystem | DCLMonitor | DCLPlanner | DCLAnalyzer | DCLExecutor | DCLSensor |
		//DCLActuator | DCLKnowledge | DCLReferences | DCLLayer | DCLComponent | DCLSubSystem | DCLModule | DCLComponentInterface
		public Alternatives getAlternatives() { return cAlternatives; }

		//DCLManagedSubsystem
		public RuleCall getDCLManagedSubsystemParserRuleCall_0() { return cDCLManagedSubsystemParserRuleCall_0; }

		//DCLManagingSubsystem
		public RuleCall getDCLManagingSubsystemParserRuleCall_1() { return cDCLManagingSubsystemParserRuleCall_1; }

		//DCLMonitor
		public RuleCall getDCLMonitorParserRuleCall_2() { return cDCLMonitorParserRuleCall_2; }

		//DCLPlanner
		public RuleCall getDCLPlannerParserRuleCall_3() { return cDCLPlannerParserRuleCall_3; }

		//DCLAnalyzer
		public RuleCall getDCLAnalyzerParserRuleCall_4() { return cDCLAnalyzerParserRuleCall_4; }

		//DCLExecutor
		public RuleCall getDCLExecutorParserRuleCall_5() { return cDCLExecutorParserRuleCall_5; }

		//DCLSensor
		public RuleCall getDCLSensorParserRuleCall_6() { return cDCLSensorParserRuleCall_6; }

		//DCLActuator
		public RuleCall getDCLActuatorParserRuleCall_7() { return cDCLActuatorParserRuleCall_7; }

		//DCLKnowledge
		public RuleCall getDCLKnowledgeParserRuleCall_8() { return cDCLKnowledgeParserRuleCall_8; }

		//DCLReferences
		public RuleCall getDCLReferencesParserRuleCall_9() { return cDCLReferencesParserRuleCall_9; }

		//DCLLayer
		public RuleCall getDCLLayerParserRuleCall_10() { return cDCLLayerParserRuleCall_10; }

		//DCLComponent
		public RuleCall getDCLComponentParserRuleCall_11() { return cDCLComponentParserRuleCall_11; }

		//DCLSubSystem
		public RuleCall getDCLSubSystemParserRuleCall_12() { return cDCLSubSystemParserRuleCall_12; }

		//DCLModule
		public RuleCall getDCLModuleParserRuleCall_13() { return cDCLModuleParserRuleCall_13; }

		//DCLComponentInterface
		public RuleCall getDCLComponentInterfaceParserRuleCall_14() { return cDCLComponentInterfaceParserRuleCall_14; }
	}

	public class DCLManagedSubsystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLManagedSubsystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManagedSubsystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cInManagedSubsystemKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cManagedSubsystemAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cManagedSubsystemDCLManagedSubsystemCrossReference_2_2_0 = (CrossReference)cManagedSubsystemAssignment_2_2.eContents().get(0);
		private final RuleCall cManagedSubsystemDCLManagedSubsystemIDTerminalRuleCall_2_2_0_1 = (RuleCall)cManagedSubsystemDCLManagedSubsystemCrossReference_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DCLManagedSubsystem:
		//	'managedSubsystem' name=ID (',' 'inManagedSubsystem:' managedSubsystem=[DCLManagedSubsystem])? ';';
		@Override public ParserRule getRule() { return rule; }

		//'managedSubsystem' name=ID (',' 'inManagedSubsystem:' managedSubsystem=[DCLManagedSubsystem])? ';'
		public Group getGroup() { return cGroup; }

		//'managedSubsystem'
		public Keyword getManagedSubsystemKeyword_0() { return cManagedSubsystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(',' 'inManagedSubsystem:' managedSubsystem=[DCLManagedSubsystem])?
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//'inManagedSubsystem:'
		public Keyword getInManagedSubsystemKeyword_2_1() { return cInManagedSubsystemKeyword_2_1; }

		//managedSubsystem=[DCLManagedSubsystem]
		public Assignment getManagedSubsystemAssignment_2_2() { return cManagedSubsystemAssignment_2_2; }

		//[DCLManagedSubsystem]
		public CrossReference getManagedSubsystemDCLManagedSubsystemCrossReference_2_2_0() { return cManagedSubsystemDCLManagedSubsystemCrossReference_2_2_0; }

		//ID
		public RuleCall getManagedSubsystemDCLManagedSubsystemIDTerminalRuleCall_2_2_0_1() { return cManagedSubsystemDCLManagedSubsystemIDTerminalRuleCall_2_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DCLManagingSubsystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLManagingSubsystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cManagingSubsystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cInManagingSubsystemKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cManagingSubsystemAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0 = (CrossReference)cManagingSubsystemAssignment_2_2.eContents().get(0);
		private final RuleCall cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1 = (RuleCall)cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DCLManagingSubsystem:
		//	'managingSubsystem' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
		@Override public ParserRule getRule() { return rule; }

		//'managingSubsystem' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';'
		public Group getGroup() { return cGroup; }

		//'managingSubsystem'
		public Keyword getManagingSubsystemKeyword_0() { return cManagingSubsystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])?
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//'inManagingSubsystem:'
		public Keyword getInManagingSubsystemKeyword_2_1() { return cInManagingSubsystemKeyword_2_1; }

		//managingSubsystem=[DCLManagingSubsystem]
		public Assignment getManagingSubsystemAssignment_2_2() { return cManagingSubsystemAssignment_2_2; }

		//[DCLManagingSubsystem]
		public CrossReference getManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0() { return cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0; }

		//ID
		public RuleCall getManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1() { return cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DCLMonitorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLMonitor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMonitorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cInManagingSubsystemKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cManagingSubsystemAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0 = (CrossReference)cManagingSubsystemAssignment_2_2.eContents().get(0);
		private final RuleCall cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1 = (RuleCall)cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DCLMonitor:
		//	'monitor' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
		@Override public ParserRule getRule() { return rule; }

		//'monitor' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';'
		public Group getGroup() { return cGroup; }

		//'monitor'
		public Keyword getMonitorKeyword_0() { return cMonitorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])?
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//'inManagingSubsystem:'
		public Keyword getInManagingSubsystemKeyword_2_1() { return cInManagingSubsystemKeyword_2_1; }

		//managingSubsystem=[DCLManagingSubsystem]
		public Assignment getManagingSubsystemAssignment_2_2() { return cManagingSubsystemAssignment_2_2; }

		//[DCLManagingSubsystem]
		public CrossReference getManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0() { return cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0; }

		//ID
		public RuleCall getManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1() { return cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DCLPlannerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLPlanner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlannerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cInManagingSubsystemKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cManagingSubsystemAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0 = (CrossReference)cManagingSubsystemAssignment_2_2.eContents().get(0);
		private final RuleCall cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1 = (RuleCall)cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DCLPlanner:
		//	'planner' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
		@Override public ParserRule getRule() { return rule; }

		//'planner' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';'
		public Group getGroup() { return cGroup; }

		//'planner'
		public Keyword getPlannerKeyword_0() { return cPlannerKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])?
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//'inManagingSubsystem:'
		public Keyword getInManagingSubsystemKeyword_2_1() { return cInManagingSubsystemKeyword_2_1; }

		//managingSubsystem=[DCLManagingSubsystem]
		public Assignment getManagingSubsystemAssignment_2_2() { return cManagingSubsystemAssignment_2_2; }

		//[DCLManagingSubsystem]
		public CrossReference getManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0() { return cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0; }

		//ID
		public RuleCall getManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1() { return cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DCLAnalyzerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLAnalyzer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnalyzerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cInManagingSubsystemKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cManagingSubsystemAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0 = (CrossReference)cManagingSubsystemAssignment_2_2.eContents().get(0);
		private final RuleCall cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1 = (RuleCall)cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DCLAnalyzer:
		//	'analyzer' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
		@Override public ParserRule getRule() { return rule; }

		//'analyzer' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';'
		public Group getGroup() { return cGroup; }

		//'analyzer'
		public Keyword getAnalyzerKeyword_0() { return cAnalyzerKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])?
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//'inManagingSubsystem:'
		public Keyword getInManagingSubsystemKeyword_2_1() { return cInManagingSubsystemKeyword_2_1; }

		//managingSubsystem=[DCLManagingSubsystem]
		public Assignment getManagingSubsystemAssignment_2_2() { return cManagingSubsystemAssignment_2_2; }

		//[DCLManagingSubsystem]
		public CrossReference getManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0() { return cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0; }

		//ID
		public RuleCall getManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1() { return cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DCLExecutorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLExecutor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cInManagingSubsystemKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cManagingSubsystemAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0 = (CrossReference)cManagingSubsystemAssignment_2_2.eContents().get(0);
		private final RuleCall cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1 = (RuleCall)cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DCLExecutor:
		//	'executor' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
		@Override public ParserRule getRule() { return rule; }

		//'executor' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';'
		public Group getGroup() { return cGroup; }

		//'executor'
		public Keyword getExecutorKeyword_0() { return cExecutorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])?
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//'inManagingSubsystem:'
		public Keyword getInManagingSubsystemKeyword_2_1() { return cInManagingSubsystemKeyword_2_1; }

		//managingSubsystem=[DCLManagingSubsystem]
		public Assignment getManagingSubsystemAssignment_2_2() { return cManagingSubsystemAssignment_2_2; }

		//[DCLManagingSubsystem]
		public CrossReference getManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0() { return cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0; }

		//ID
		public RuleCall getManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1() { return cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DCLSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cInManagingSubsystemKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cManagingSubsystemAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0 = (CrossReference)cManagingSubsystemAssignment_2_2.eContents().get(0);
		private final RuleCall cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1 = (RuleCall)cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DCLSensor:
		//	'sensor' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
		@Override public ParserRule getRule() { return rule; }

		//'sensor' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';'
		public Group getGroup() { return cGroup; }

		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])?
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//'inManagingSubsystem:'
		public Keyword getInManagingSubsystemKeyword_2_1() { return cInManagingSubsystemKeyword_2_1; }

		//managingSubsystem=[DCLManagingSubsystem]
		public Assignment getManagingSubsystemAssignment_2_2() { return cManagingSubsystemAssignment_2_2; }

		//[DCLManagingSubsystem]
		public CrossReference getManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0() { return cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0; }

		//ID
		public RuleCall getManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1() { return cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DCLActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLActuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActuatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cInManagingSubsystemKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cManagingSubsystemAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0 = (CrossReference)cManagingSubsystemAssignment_2_2.eContents().get(0);
		private final RuleCall cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1 = (RuleCall)cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DCLActuator:
		//	'actuator' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
		@Override public ParserRule getRule() { return rule; }

		//'actuator' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';'
		public Group getGroup() { return cGroup; }

		//'actuator'
		public Keyword getActuatorKeyword_0() { return cActuatorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])?
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//'inManagingSubsystem:'
		public Keyword getInManagingSubsystemKeyword_2_1() { return cInManagingSubsystemKeyword_2_1; }

		//managingSubsystem=[DCLManagingSubsystem]
		public Assignment getManagingSubsystemAssignment_2_2() { return cManagingSubsystemAssignment_2_2; }

		//[DCLManagingSubsystem]
		public CrossReference getManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0() { return cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0; }

		//ID
		public RuleCall getManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1() { return cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DCLKnowledgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLKnowledge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKnowledgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cInManagingSubsystemKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cManagingSubsystemAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0 = (CrossReference)cManagingSubsystemAssignment_2_2.eContents().get(0);
		private final RuleCall cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1 = (RuleCall)cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DCLKnowledge:
		//	'knowledge' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
		@Override public ParserRule getRule() { return rule; }

		//'knowledge' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';'
		public Group getGroup() { return cGroup; }

		//'knowledge'
		public Keyword getKnowledgeKeyword_0() { return cKnowledgeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])?
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//'inManagingSubsystem:'
		public Keyword getInManagingSubsystemKeyword_2_1() { return cInManagingSubsystemKeyword_2_1; }

		//managingSubsystem=[DCLManagingSubsystem]
		public Assignment getManagingSubsystemAssignment_2_2() { return cManagingSubsystemAssignment_2_2; }

		//[DCLManagingSubsystem]
		public CrossReference getManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0() { return cManagingSubsystemDCLManagingSubsystemCrossReference_2_2_0; }

		//ID
		public RuleCall getManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1() { return cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DCLReferencesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLReferences");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReferencesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cInManagingSubsystemKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cManagingSubsystemAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final CrossReference cManagingSubsystemDCLManagingSubsystemCrossReference_2_0_2_0 = (CrossReference)cManagingSubsystemAssignment_2_0_2.eContents().get(0);
		private final RuleCall cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_0_2_0_1 = (RuleCall)cManagingSubsystemDCLManagingSubsystemCrossReference_2_0_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cInKnowledgeKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cKnowledgeAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final CrossReference cKnowledgeDCLKnowledgeCrossReference_2_1_2_0 = (CrossReference)cKnowledgeAssignment_2_1_2.eContents().get(0);
		private final RuleCall cKnowledgeDCLKnowledgeIDTerminalRuleCall_2_1_2_0_1 = (RuleCall)cKnowledgeDCLKnowledgeCrossReference_2_1_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DCLReferences:
		//	'references' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem] | ',' 'inKnowledge:'
		//	knowledge=[DCLKnowledge])? ';';
		@Override public ParserRule getRule() { return rule; }

		//'references' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem] | ',' 'inKnowledge:'
		//knowledge=[DCLKnowledge])? ';'
		public Group getGroup() { return cGroup; }

		//'references'
		public Keyword getReferencesKeyword_0() { return cReferencesKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem] | ',' 'inKnowledge:' knowledge=[DCLKnowledge])?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem]
		public Group getGroup_2_0() { return cGroup_2_0; }

		//','
		public Keyword getCommaKeyword_2_0_0() { return cCommaKeyword_2_0_0; }

		//'inManagingSubsystem:'
		public Keyword getInManagingSubsystemKeyword_2_0_1() { return cInManagingSubsystemKeyword_2_0_1; }

		//managingSubsystem=[DCLManagingSubsystem]
		public Assignment getManagingSubsystemAssignment_2_0_2() { return cManagingSubsystemAssignment_2_0_2; }

		//[DCLManagingSubsystem]
		public CrossReference getManagingSubsystemDCLManagingSubsystemCrossReference_2_0_2_0() { return cManagingSubsystemDCLManagingSubsystemCrossReference_2_0_2_0; }

		//ID
		public RuleCall getManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_0_2_0_1() { return cManagingSubsystemDCLManagingSubsystemIDTerminalRuleCall_2_0_2_0_1; }

		//',' 'inKnowledge:' knowledge=[DCLKnowledge]
		public Group getGroup_2_1() { return cGroup_2_1; }

		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//'inKnowledge:'
		public Keyword getInKnowledgeKeyword_2_1_1() { return cInKnowledgeKeyword_2_1_1; }

		//knowledge=[DCLKnowledge]
		public Assignment getKnowledgeAssignment_2_1_2() { return cKnowledgeAssignment_2_1_2; }

		//[DCLKnowledge]
		public CrossReference getKnowledgeDCLKnowledgeCrossReference_2_1_2_0() { return cKnowledgeDCLKnowledgeCrossReference_2_1_2_0; }

		//ID
		public RuleCall getKnowledgeDCLKnowledgeIDTerminalRuleCall_2_1_2_0_1() { return cKnowledgeDCLKnowledgeIDTerminalRuleCall_2_1_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DCLLayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLLayer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLayerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLevelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLevelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLevelINTTerminalRuleCall_4_0 = (RuleCall)cLevelAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cCommaKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Keyword cInLayerKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cLayerAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final CrossReference cLayerDCLLayerCrossReference_5_0_2_0 = (CrossReference)cLayerAssignment_5_0_2.eContents().get(0);
		private final RuleCall cLayerDCLLayerIDTerminalRuleCall_5_0_2_0_1 = (RuleCall)cLayerDCLLayerCrossReference_5_0_2_0.eContents().get(1);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cInSubSystemKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cSubSystemAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final CrossReference cSubSystemDCLSubSystemCrossReference_5_1_2_0 = (CrossReference)cSubSystemAssignment_5_1_2.eContents().get(0);
		private final RuleCall cSubSystemDCLSubSystemIDTerminalRuleCall_5_1_2_0_1 = (RuleCall)cSubSystemDCLSubSystemCrossReference_5_1_2_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cAlternatives_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Keyword cInComponentKeyword_5_2_1 = (Keyword)cGroup_5_2.eContents().get(1);
		private final Assignment cComponentAssignment_5_2_2 = (Assignment)cGroup_5_2.eContents().get(2);
		private final CrossReference cComponentDCLComponentCrossReference_5_2_2_0 = (CrossReference)cComponentAssignment_5_2_2.eContents().get(0);
		private final RuleCall cComponentDCLComponentIDTerminalRuleCall_5_2_2_0_1 = (RuleCall)cComponentDCLComponentCrossReference_5_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DCLLayer:
		//	'layer' name=ID ',' 'level' level=INT (',' 'inLayer:' layer=[DCLLayer] | ',' 'inSubSystem:' subSystem=[DCLSubSystem] |
		//	',' 'inComponent:' component=[DCLComponent])? ';';
		@Override public ParserRule getRule() { return rule; }

		//'layer' name=ID ',' 'level' level=INT (',' 'inLayer:' layer=[DCLLayer] | ',' 'inSubSystem:' subSystem=[DCLSubSystem] |
		//',' 'inComponent:' component=[DCLComponent])? ';'
		public Group getGroup() { return cGroup; }

		//'layer'
		public Keyword getLayerKeyword_0() { return cLayerKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }

		//'level'
		public Keyword getLevelKeyword_3() { return cLevelKeyword_3; }

		//level=INT
		public Assignment getLevelAssignment_4() { return cLevelAssignment_4; }

		//INT
		public RuleCall getLevelINTTerminalRuleCall_4_0() { return cLevelINTTerminalRuleCall_4_0; }

		//(',' 'inLayer:' layer=[DCLLayer] | ',' 'inSubSystem:' subSystem=[DCLSubSystem] | ',' 'inComponent:'
		//component=[DCLComponent])?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//',' 'inLayer:' layer=[DCLLayer]
		public Group getGroup_5_0() { return cGroup_5_0; }

		//','
		public Keyword getCommaKeyword_5_0_0() { return cCommaKeyword_5_0_0; }

		//'inLayer:'
		public Keyword getInLayerKeyword_5_0_1() { return cInLayerKeyword_5_0_1; }

		//layer=[DCLLayer]
		public Assignment getLayerAssignment_5_0_2() { return cLayerAssignment_5_0_2; }

		//[DCLLayer]
		public CrossReference getLayerDCLLayerCrossReference_5_0_2_0() { return cLayerDCLLayerCrossReference_5_0_2_0; }

		//ID
		public RuleCall getLayerDCLLayerIDTerminalRuleCall_5_0_2_0_1() { return cLayerDCLLayerIDTerminalRuleCall_5_0_2_0_1; }

		//',' 'inSubSystem:' subSystem=[DCLSubSystem]
		public Group getGroup_5_1() { return cGroup_5_1; }

		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//'inSubSystem:'
		public Keyword getInSubSystemKeyword_5_1_1() { return cInSubSystemKeyword_5_1_1; }

		//subSystem=[DCLSubSystem]
		public Assignment getSubSystemAssignment_5_1_2() { return cSubSystemAssignment_5_1_2; }

		//[DCLSubSystem]
		public CrossReference getSubSystemDCLSubSystemCrossReference_5_1_2_0() { return cSubSystemDCLSubSystemCrossReference_5_1_2_0; }

		//ID
		public RuleCall getSubSystemDCLSubSystemIDTerminalRuleCall_5_1_2_0_1() { return cSubSystemDCLSubSystemIDTerminalRuleCall_5_1_2_0_1; }

		//',' 'inComponent:' component=[DCLComponent]
		public Group getGroup_5_2() { return cGroup_5_2; }

		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//'inComponent:'
		public Keyword getInComponentKeyword_5_2_1() { return cInComponentKeyword_5_2_1; }

		//component=[DCLComponent]
		public Assignment getComponentAssignment_5_2_2() { return cComponentAssignment_5_2_2; }

		//[DCLComponent]
		public CrossReference getComponentDCLComponentCrossReference_5_2_2_0() { return cComponentDCLComponentCrossReference_5_2_2_0; }

		//ID
		public RuleCall getComponentDCLComponentIDTerminalRuleCall_5_2_2_0_1() { return cComponentDCLComponentIDTerminalRuleCall_5_2_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class DCLComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cInLayerKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cLayerAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final CrossReference cLayerDCLLayerCrossReference_2_0_2_0 = (CrossReference)cLayerAssignment_2_0_2.eContents().get(0);
		private final RuleCall cLayerDCLLayerIDTerminalRuleCall_2_0_2_0_1 = (RuleCall)cLayerDCLLayerCrossReference_2_0_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Keyword cInSubSystemKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cSubSystemAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final CrossReference cSubSystemDCLSubSystemCrossReference_2_1_2_0 = (CrossReference)cSubSystemAssignment_2_1_2.eContents().get(0);
		private final RuleCall cSubSystemDCLSubSystemIDTerminalRuleCall_2_1_2_0_1 = (RuleCall)cSubSystemDCLSubSystemCrossReference_2_1_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DCLComponent:
		//	'component' name=ID (',' 'inLayer:' layer=[DCLLayer] | ',' 'inSubSystem:' subSystem=[DCLSubSystem])? ';';
		@Override public ParserRule getRule() { return rule; }

		//'component' name=ID (',' 'inLayer:' layer=[DCLLayer] | ',' 'inSubSystem:' subSystem=[DCLSubSystem])? ';'
		public Group getGroup() { return cGroup; }

		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(',' 'inLayer:' layer=[DCLLayer] | ',' 'inSubSystem:' subSystem=[DCLSubSystem])?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//',' 'inLayer:' layer=[DCLLayer]
		public Group getGroup_2_0() { return cGroup_2_0; }

		//','
		public Keyword getCommaKeyword_2_0_0() { return cCommaKeyword_2_0_0; }

		//'inLayer:'
		public Keyword getInLayerKeyword_2_0_1() { return cInLayerKeyword_2_0_1; }

		//layer=[DCLLayer]
		public Assignment getLayerAssignment_2_0_2() { return cLayerAssignment_2_0_2; }

		//[DCLLayer]
		public CrossReference getLayerDCLLayerCrossReference_2_0_2_0() { return cLayerDCLLayerCrossReference_2_0_2_0; }

		//ID
		public RuleCall getLayerDCLLayerIDTerminalRuleCall_2_0_2_0_1() { return cLayerDCLLayerIDTerminalRuleCall_2_0_2_0_1; }

		//',' 'inSubSystem:' subSystem=[DCLSubSystem]
		public Group getGroup_2_1() { return cGroup_2_1; }

		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//'inSubSystem:'
		public Keyword getInSubSystemKeyword_2_1_1() { return cInSubSystemKeyword_2_1_1; }

		//subSystem=[DCLSubSystem]
		public Assignment getSubSystemAssignment_2_1_2() { return cSubSystemAssignment_2_1_2; }

		//[DCLSubSystem]
		public CrossReference getSubSystemDCLSubSystemCrossReference_2_1_2_0() { return cSubSystemDCLSubSystemCrossReference_2_1_2_0; }

		//ID
		public RuleCall getSubSystemDCLSubSystemIDTerminalRuleCall_2_1_2_0_1() { return cSubSystemDCLSubSystemIDTerminalRuleCall_2_1_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DCLComponentInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLComponentInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOfComponentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cComponentDCLStructureElementCrossReference_3_0 = (CrossReference)cComponentAssignment_3.eContents().get(0);
		private final RuleCall cComponentDCLStructureElementIDTerminalRuleCall_3_0_1 = (RuleCall)cComponentDCLStructureElementCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cTypeKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cInterfaceTypeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cInterfaceTypeInterfaceTypeParserRuleCall_4_2_0 = (RuleCall)cInterfaceTypeAssignment_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DCLComponentInterface:
		//	'interface' name=ID 'ofComponent' component=[DCLStructureElement] (',' 'type:' interfaceType=InterfaceType) ';';
		@Override public ParserRule getRule() { return rule; }

		//'interface' name=ID 'ofComponent' component=[DCLStructureElement] (',' 'type:' interfaceType=InterfaceType) ';'
		public Group getGroup() { return cGroup; }

		//'interface'
		public Keyword getInterfaceKeyword_0() { return cInterfaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'ofComponent'
		public Keyword getOfComponentKeyword_2() { return cOfComponentKeyword_2; }

		//component=[DCLStructureElement]
		public Assignment getComponentAssignment_3() { return cComponentAssignment_3; }

		//[DCLStructureElement]
		public CrossReference getComponentDCLStructureElementCrossReference_3_0() { return cComponentDCLStructureElementCrossReference_3_0; }

		//ID
		public RuleCall getComponentDCLStructureElementIDTerminalRuleCall_3_0_1() { return cComponentDCLStructureElementIDTerminalRuleCall_3_0_1; }

		//',' 'type:' interfaceType=InterfaceType
		public Group getGroup_4() { return cGroup_4; }

		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//'type:'
		public Keyword getTypeKeyword_4_1() { return cTypeKeyword_4_1; }

		//interfaceType=InterfaceType
		public Assignment getInterfaceTypeAssignment_4_2() { return cInterfaceTypeAssignment_4_2; }

		//InterfaceType
		public RuleCall getInterfaceTypeInterfaceTypeParserRuleCall_4_2_0() { return cInterfaceTypeInterfaceTypeParserRuleCall_4_2_0; }

		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class InterfaceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.InterfaceType");
		private final Assignment cInterfaceTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cInterfaceTypeNameAlternatives_0 = (Alternatives)cInterfaceTypeNameAssignment.eContents().get(0);
		private final Keyword cInterfaceTypeNameProvidedKeyword_0_0 = (Keyword)cInterfaceTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cInterfaceTypeNameRequiredKeyword_0_1 = (Keyword)cInterfaceTypeNameAlternatives_0.eContents().get(1);
		
		//InterfaceType:
		//	interfaceTypeName=('provided' | 'required');
		@Override public ParserRule getRule() { return rule; }

		//interfaceTypeName=('provided' | 'required')
		public Assignment getInterfaceTypeNameAssignment() { return cInterfaceTypeNameAssignment; }

		//('provided' | 'required')
		public Alternatives getInterfaceTypeNameAlternatives_0() { return cInterfaceTypeNameAlternatives_0; }

		//'provided'
		public Keyword getInterfaceTypeNameProvidedKeyword_0_0() { return cInterfaceTypeNameProvidedKeyword_0_0; }

		//'required'
		public Keyword getInterfaceTypeNameRequiredKeyword_0_1() { return cInterfaceTypeNameRequiredKeyword_0_1; }
	}

	public class DCLSubSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLSubSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cInSubSystemKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cSubSystemAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cSubSystemDCLSubSystemCrossReference_2_2_0 = (CrossReference)cSubSystemAssignment_2_2.eContents().get(0);
		private final RuleCall cSubSystemDCLSubSystemIDTerminalRuleCall_2_2_0_1 = (RuleCall)cSubSystemDCLSubSystemCrossReference_2_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DCLSubSystem:
		//	'subSystem' name=ID (',' 'inSubSystem:' subSystem=[DCLSubSystem])? ';';
		@Override public ParserRule getRule() { return rule; }

		//'subSystem' name=ID (',' 'inSubSystem:' subSystem=[DCLSubSystem])? ';'
		public Group getGroup() { return cGroup; }

		//'subSystem'
		public Keyword getSubSystemKeyword_0() { return cSubSystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(',' 'inSubSystem:' subSystem=[DCLSubSystem])?
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//'inSubSystem:'
		public Keyword getInSubSystemKeyword_2_1() { return cInSubSystemKeyword_2_1; }

		//subSystem=[DCLSubSystem]
		public Assignment getSubSystemAssignment_2_2() { return cSubSystemAssignment_2_2; }

		//[DCLSubSystem]
		public CrossReference getSubSystemDCLSubSystemCrossReference_2_2_0() { return cSubSystemDCLSubSystemCrossReference_2_2_0; }

		//ID
		public RuleCall getSubSystemDCLSubSystemIDTerminalRuleCall_2_2_0_1() { return cSubSystemDCLSubSystemIDTerminalRuleCall_2_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DCLModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCLModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DCLModule:
		//	'module' name=ID ';';
		@Override public ParserRule getRule() { return rule; }

		//'module' name=ID ';'
		public Group getGroup() { return cGroup; }

		//'module'
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DCDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.DCDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOnlyAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOnlyOnlyParserRuleCall_0_0_0 = (RuleCall)cOnlyAssignment_0_0.eContents().get(0);
		private final Assignment cTAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTDCLStructureElementCrossReference_0_1_0 = (CrossReference)cTAssignment_0_1.eContents().get(0);
		private final RuleCall cTDCLStructureElementIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTDCLStructureElementCrossReference_0_1_0.eContents().get(1);
		private final Assignment cCanAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCanCanParserRuleCall_0_2_0 = (RuleCall)cCanAssignment_0_2.eContents().get(0);
		private final Assignment cElementTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cElementTypeElementTypeParserRuleCall_0_3_0 = (RuleCall)cElementTypeAssignment_0_3.eContents().get(0);
		private final Assignment cTypeAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cTypeDCLStructureElementCrossReference_0_4_0 = (CrossReference)cTypeAssignment_0_4.eContents().get(0);
		private final RuleCall cTypeDCLStructureElementIDTerminalRuleCall_0_4_0_1 = (RuleCall)cTypeDCLStructureElementCrossReference_0_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cTDCLStructureElementCrossReference_1_0_0 = (CrossReference)cTAssignment_1_0.eContents().get(0);
		private final RuleCall cTDCLStructureElementIDTerminalRuleCall_1_0_0_1 = (RuleCall)cTDCLStructureElementCrossReference_1_0_0.eContents().get(1);
		private final Assignment cCannotAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCannotCannotParserRuleCall_1_1_0 = (RuleCall)cCannotAssignment_1_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_1_2_0 = (RuleCall)cElementTypeAssignment_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cTypeDCLStructureElementCrossReference_1_3_0 = (CrossReference)cTypeAssignment_1_3.eContents().get(0);
		private final RuleCall cTypeDCLStructureElementIDTerminalRuleCall_1_3_0_1 = (RuleCall)cTypeDCLStructureElementCrossReference_1_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cTDCLStructureElementCrossReference_2_0_0 = (CrossReference)cTAssignment_2_0.eContents().get(0);
		private final RuleCall cTDCLStructureElementIDTerminalRuleCall_2_0_0_1 = (RuleCall)cTDCLStructureElementCrossReference_2_0_0.eContents().get(1);
		private final Assignment cCanAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCanCanParserRuleCall_2_1_0 = (RuleCall)cCanAssignment_2_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_2_2_0 = (RuleCall)cElementTypeAssignment_2_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final CrossReference cTypeDCLStructureElementCrossReference_2_3_0 = (CrossReference)cTypeAssignment_2_3.eContents().get(0);
		private final RuleCall cTypeDCLStructureElementIDTerminalRuleCall_2_3_0_1 = (RuleCall)cTypeDCLStructureElementCrossReference_2_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cTAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cTDCLStructureElementCrossReference_3_0_0 = (CrossReference)cTAssignment_3_0.eContents().get(0);
		private final RuleCall cTDCLStructureElementIDTerminalRuleCall_3_0_0_1 = (RuleCall)cTDCLStructureElementCrossReference_3_0_0.eContents().get(1);
		private final Assignment cCanAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCanCanParserRuleCall_3_1_0 = (RuleCall)cCanAssignment_3_1.eContents().get(0);
		private final Assignment cElementTypeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cElementTypeElementTypeParserRuleCall_3_2_0 = (RuleCall)cElementTypeAssignment_3_2.eContents().get(0);
		private final Assignment cOnly2Assignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cOnly2Only2ParserRuleCall_3_3_0 = (RuleCall)cOnly2Assignment_3_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final CrossReference cTypeDCLStructureElementCrossReference_3_4_0 = (CrossReference)cTypeAssignment_3_4.eContents().get(0);
		private final RuleCall cTypeDCLStructureElementIDTerminalRuleCall_3_4_0_1 = (RuleCall)cTypeDCLStructureElementCrossReference_3_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cTAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final CrossReference cTDCLStructureElementCrossReference_4_0_0 = (CrossReference)cTAssignment_4_0.eContents().get(0);
		private final RuleCall cTDCLStructureElementIDTerminalRuleCall_4_0_0_1 = (RuleCall)cTDCLStructureElementCrossReference_4_0_0.eContents().get(1);
		private final Assignment cMustAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMustMustParserRuleCall_4_1_0 = (RuleCall)cMustAssignment_4_1.eContents().get(0);
		private final Assignment cEntityTypeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cEntityTypeEntityTypeParserRuleCall_4_2_0 = (RuleCall)cEntityTypeAssignment_4_2.eContents().get(0);
		private final Assignment cTypeAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final CrossReference cTypeDCLStructureElementCrossReference_4_3_0 = (CrossReference)cTypeAssignment_4_3.eContents().get(0);
		private final RuleCall cTypeDCLStructureElementIDTerminalRuleCall_4_3_0_1 = (RuleCall)cTypeDCLStructureElementCrossReference_4_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//DCDecl:
		//	only=Only t=[DCLStructureElement] can=Can elementType=ElementType type=[DCLStructureElement] ';' |
		//	t=[DCLStructureElement] cannot=Cannot elementType=ElementType type=[DCLStructureElement] ';' | t=[DCLStructureElement]
		//	can=Can elementType=ElementType type=[DCLStructureElement] ';' | t=[DCLStructureElement] can=Can
		//	elementType=ElementType only2=Only2 type=[DCLStructureElement] ';' | t=[DCLStructureElement] must=Must
		//	entityType=EntityType type=[DCLStructureElement] ';';
		@Override public ParserRule getRule() { return rule; }

		//only=Only t=[DCLStructureElement] can=Can elementType=ElementType type=[DCLStructureElement] ';' |
		//t=[DCLStructureElement] cannot=Cannot elementType=ElementType type=[DCLStructureElement] ';' | t=[DCLStructureElement]
		//can=Can elementType=ElementType type=[DCLStructureElement] ';' | t=[DCLStructureElement] can=Can
		//elementType=ElementType only2=Only2 type=[DCLStructureElement] ';' | t=[DCLStructureElement] must=Must
		//entityType=EntityType type=[DCLStructureElement] ';'
		public Alternatives getAlternatives() { return cAlternatives; }

		//only=Only t=[DCLStructureElement] can=Can elementType=ElementType type=[DCLStructureElement] ';'
		public Group getGroup_0() { return cGroup_0; }

		//only=Only
		public Assignment getOnlyAssignment_0_0() { return cOnlyAssignment_0_0; }

		//Only
		public RuleCall getOnlyOnlyParserRuleCall_0_0_0() { return cOnlyOnlyParserRuleCall_0_0_0; }

		//t=[DCLStructureElement]
		public Assignment getTAssignment_0_1() { return cTAssignment_0_1; }

		//[DCLStructureElement]
		public CrossReference getTDCLStructureElementCrossReference_0_1_0() { return cTDCLStructureElementCrossReference_0_1_0; }

		//ID
		public RuleCall getTDCLStructureElementIDTerminalRuleCall_0_1_0_1() { return cTDCLStructureElementIDTerminalRuleCall_0_1_0_1; }

		//can=Can
		public Assignment getCanAssignment_0_2() { return cCanAssignment_0_2; }

		//Can
		public RuleCall getCanCanParserRuleCall_0_2_0() { return cCanCanParserRuleCall_0_2_0; }

		//elementType=ElementType
		public Assignment getElementTypeAssignment_0_3() { return cElementTypeAssignment_0_3; }

		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_0_3_0() { return cElementTypeElementTypeParserRuleCall_0_3_0; }

		//type=[DCLStructureElement]
		public Assignment getTypeAssignment_0_4() { return cTypeAssignment_0_4; }

		//[DCLStructureElement]
		public CrossReference getTypeDCLStructureElementCrossReference_0_4_0() { return cTypeDCLStructureElementCrossReference_0_4_0; }

		//ID
		public RuleCall getTypeDCLStructureElementIDTerminalRuleCall_0_4_0_1() { return cTypeDCLStructureElementIDTerminalRuleCall_0_4_0_1; }

		//';'
		public Keyword getSemicolonKeyword_0_5() { return cSemicolonKeyword_0_5; }

		//t=[DCLStructureElement] cannot=Cannot elementType=ElementType type=[DCLStructureElement] ';'
		public Group getGroup_1() { return cGroup_1; }

		//t=[DCLStructureElement]
		public Assignment getTAssignment_1_0() { return cTAssignment_1_0; }

		//[DCLStructureElement]
		public CrossReference getTDCLStructureElementCrossReference_1_0_0() { return cTDCLStructureElementCrossReference_1_0_0; }

		//ID
		public RuleCall getTDCLStructureElementIDTerminalRuleCall_1_0_0_1() { return cTDCLStructureElementIDTerminalRuleCall_1_0_0_1; }

		//cannot=Cannot
		public Assignment getCannotAssignment_1_1() { return cCannotAssignment_1_1; }

		//Cannot
		public RuleCall getCannotCannotParserRuleCall_1_1_0() { return cCannotCannotParserRuleCall_1_1_0; }

		//elementType=ElementType
		public Assignment getElementTypeAssignment_1_2() { return cElementTypeAssignment_1_2; }

		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_1_2_0() { return cElementTypeElementTypeParserRuleCall_1_2_0; }

		//type=[DCLStructureElement]
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }

		//[DCLStructureElement]
		public CrossReference getTypeDCLStructureElementCrossReference_1_3_0() { return cTypeDCLStructureElementCrossReference_1_3_0; }

		//ID
		public RuleCall getTypeDCLStructureElementIDTerminalRuleCall_1_3_0_1() { return cTypeDCLStructureElementIDTerminalRuleCall_1_3_0_1; }

		//';'
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }

		//t=[DCLStructureElement] can=Can elementType=ElementType type=[DCLStructureElement] ';'
		public Group getGroup_2() { return cGroup_2; }

		//t=[DCLStructureElement]
		public Assignment getTAssignment_2_0() { return cTAssignment_2_0; }

		//[DCLStructureElement]
		public CrossReference getTDCLStructureElementCrossReference_2_0_0() { return cTDCLStructureElementCrossReference_2_0_0; }

		//ID
		public RuleCall getTDCLStructureElementIDTerminalRuleCall_2_0_0_1() { return cTDCLStructureElementIDTerminalRuleCall_2_0_0_1; }

		//can=Can
		public Assignment getCanAssignment_2_1() { return cCanAssignment_2_1; }

		//Can
		public RuleCall getCanCanParserRuleCall_2_1_0() { return cCanCanParserRuleCall_2_1_0; }

		//elementType=ElementType
		public Assignment getElementTypeAssignment_2_2() { return cElementTypeAssignment_2_2; }

		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_2_2_0() { return cElementTypeElementTypeParserRuleCall_2_2_0; }

		//type=[DCLStructureElement]
		public Assignment getTypeAssignment_2_3() { return cTypeAssignment_2_3; }

		//[DCLStructureElement]
		public CrossReference getTypeDCLStructureElementCrossReference_2_3_0() { return cTypeDCLStructureElementCrossReference_2_3_0; }

		//ID
		public RuleCall getTypeDCLStructureElementIDTerminalRuleCall_2_3_0_1() { return cTypeDCLStructureElementIDTerminalRuleCall_2_3_0_1; }

		//';'
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }

		//t=[DCLStructureElement] can=Can elementType=ElementType only2=Only2 type=[DCLStructureElement] ';'
		public Group getGroup_3() { return cGroup_3; }

		//t=[DCLStructureElement]
		public Assignment getTAssignment_3_0() { return cTAssignment_3_0; }

		//[DCLStructureElement]
		public CrossReference getTDCLStructureElementCrossReference_3_0_0() { return cTDCLStructureElementCrossReference_3_0_0; }

		//ID
		public RuleCall getTDCLStructureElementIDTerminalRuleCall_3_0_0_1() { return cTDCLStructureElementIDTerminalRuleCall_3_0_0_1; }

		//can=Can
		public Assignment getCanAssignment_3_1() { return cCanAssignment_3_1; }

		//Can
		public RuleCall getCanCanParserRuleCall_3_1_0() { return cCanCanParserRuleCall_3_1_0; }

		//elementType=ElementType
		public Assignment getElementTypeAssignment_3_2() { return cElementTypeAssignment_3_2; }

		//ElementType
		public RuleCall getElementTypeElementTypeParserRuleCall_3_2_0() { return cElementTypeElementTypeParserRuleCall_3_2_0; }

		//only2=Only2
		public Assignment getOnly2Assignment_3_3() { return cOnly2Assignment_3_3; }

		//Only2
		public RuleCall getOnly2Only2ParserRuleCall_3_3_0() { return cOnly2Only2ParserRuleCall_3_3_0; }

		//type=[DCLStructureElement]
		public Assignment getTypeAssignment_3_4() { return cTypeAssignment_3_4; }

		//[DCLStructureElement]
		public CrossReference getTypeDCLStructureElementCrossReference_3_4_0() { return cTypeDCLStructureElementCrossReference_3_4_0; }

		//ID
		public RuleCall getTypeDCLStructureElementIDTerminalRuleCall_3_4_0_1() { return cTypeDCLStructureElementIDTerminalRuleCall_3_4_0_1; }

		//';'
		public Keyword getSemicolonKeyword_3_5() { return cSemicolonKeyword_3_5; }

		//t=[DCLStructureElement] must=Must entityType=EntityType type=[DCLStructureElement] ';'
		public Group getGroup_4() { return cGroup_4; }

		//t=[DCLStructureElement]
		public Assignment getTAssignment_4_0() { return cTAssignment_4_0; }

		//[DCLStructureElement]
		public CrossReference getTDCLStructureElementCrossReference_4_0_0() { return cTDCLStructureElementCrossReference_4_0_0; }

		//ID
		public RuleCall getTDCLStructureElementIDTerminalRuleCall_4_0_0_1() { return cTDCLStructureElementIDTerminalRuleCall_4_0_0_1; }

		//must=Must
		public Assignment getMustAssignment_4_1() { return cMustAssignment_4_1; }

		//Must
		public RuleCall getMustMustParserRuleCall_4_1_0() { return cMustMustParserRuleCall_4_1_0; }

		//entityType=EntityType
		public Assignment getEntityTypeAssignment_4_2() { return cEntityTypeAssignment_4_2; }

		//EntityType
		public RuleCall getEntityTypeEntityTypeParserRuleCall_4_2_0() { return cEntityTypeEntityTypeParserRuleCall_4_2_0; }

		//type=[DCLStructureElement]
		public Assignment getTypeAssignment_4_3() { return cTypeAssignment_4_3; }

		//[DCLStructureElement]
		public CrossReference getTypeDCLStructureElementCrossReference_4_3_0() { return cTypeDCLStructureElementCrossReference_4_3_0; }

		//ID
		public RuleCall getTypeDCLStructureElementIDTerminalRuleCall_4_3_0_1() { return cTypeDCLStructureElementIDTerminalRuleCall_4_3_0_1; }

		//';'
		public Keyword getSemicolonKeyword_4_4() { return cSemicolonKeyword_4_4; }
	}

	public class OnlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.Only");
		private final Assignment cOnlyAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOnlyOnlyKeyword_0 = (Keyword)cOnlyAssignment.eContents().get(0);
		
		//Only:
		//	only='only';
		@Override public ParserRule getRule() { return rule; }

		//only='only'
		public Assignment getOnlyAssignment() { return cOnlyAssignment; }

		//'only'
		public Keyword getOnlyOnlyKeyword_0() { return cOnlyOnlyKeyword_0; }
	}

	public class CanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.Can");
		private final Assignment cCanAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cCanCanKeyword_0 = (Keyword)cCanAssignment.eContents().get(0);
		
		//Can:
		//	can='can-';
		@Override public ParserRule getRule() { return rule; }

		//can='can-'
		public Assignment getCanAssignment() { return cCanAssignment; }

		//'can-'
		public Keyword getCanCanKeyword_0() { return cCanCanKeyword_0; }
	}

	public class CannotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.Cannot");
		private final Assignment cCannotAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cCannotCannotKeyword_0 = (Keyword)cCannotAssignment.eContents().get(0);
		
		//Cannot:
		//	cannot='cannot-';
		@Override public ParserRule getRule() { return rule; }

		//cannot='cannot-'
		public Assignment getCannotAssignment() { return cCannotAssignment; }

		//'cannot-'
		public Keyword getCannotCannotKeyword_0() { return cCannotCannotKeyword_0; }
	}

	public class Only2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.Only2");
		private final Assignment cOnly2Assignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOnly2OnlyKeyword_0 = (Keyword)cOnly2Assignment.eContents().get(0);
		
		//Only2:
		//	only2='-only';
		@Override public ParserRule getRule() { return rule; }

		//only2='-only'
		public Assignment getOnly2Assignment() { return cOnly2Assignment; }

		//'-only'
		public Keyword getOnly2OnlyKeyword_0() { return cOnly2OnlyKeyword_0; }
	}

	public class MustElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.Must");
		private final Assignment cMustAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cMustMustKeyword_0 = (Keyword)cMustAssignment.eContents().get(0);
		
		//Must:
		//	must='must-';
		@Override public ParserRule getRule() { return rule; }

		//must='must-'
		public Assignment getMustAssignment() { return cMustAssignment; }

		//'must-'
		public Keyword getMustMustKeyword_0() { return cMustMustKeyword_0; }
	}

	public class ElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.ElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElementType:
		//	BasicType | EntityType;
		@Override public ParserRule getRule() { return rule; }

		//BasicType | EntityType
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }

		//EntityType
		public RuleCall getEntityTypeParserRuleCall_1() { return cEntityTypeParserRuleCall_1; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.BasicType");
		private final Assignment cTypeNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeNameAlternatives_0 = (Alternatives)cTypeNameAssignment.eContents().get(0);
		private final Keyword cTypeNameAccessKeyword_0_0 = (Keyword)cTypeNameAlternatives_0.eContents().get(0);
		private final Keyword cTypeNameDeclareKeyword_0_1 = (Keyword)cTypeNameAlternatives_0.eContents().get(1);
		private final Keyword cTypeNameHandleKeyword_0_2 = (Keyword)cTypeNameAlternatives_0.eContents().get(2);
		private final Keyword cTypeNameCreateKeyword_0_3 = (Keyword)cTypeNameAlternatives_0.eContents().get(3);
		private final Keyword cTypeNameDependKeyword_0_4 = (Keyword)cTypeNameAlternatives_0.eContents().get(4);
		
		//BasicType:
		//	typeName=('access' | 'declare' | 'handle' | 'create' | 'depend');
		@Override public ParserRule getRule() { return rule; }

		//typeName=('access' | 'declare' | 'handle' | 'create' | 'depend')
		public Assignment getTypeNameAssignment() { return cTypeNameAssignment; }

		//('access' | 'declare' | 'handle' | 'create' | 'depend')
		public Alternatives getTypeNameAlternatives_0() { return cTypeNameAlternatives_0; }

		//'access'
		public Keyword getTypeNameAccessKeyword_0_0() { return cTypeNameAccessKeyword_0_0; }

		//'declare'
		public Keyword getTypeNameDeclareKeyword_0_1() { return cTypeNameDeclareKeyword_0_1; }

		//'handle'
		public Keyword getTypeNameHandleKeyword_0_2() { return cTypeNameHandleKeyword_0_2; }

		//'create'
		public Keyword getTypeNameCreateKeyword_0_3() { return cTypeNameCreateKeyword_0_3; }

		//'depend'
		public Keyword getTypeNameDependKeyword_0_4() { return cTypeNameDependKeyword_0_4; }
	}

	public class EntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.br.terra.dcl.DCL.EntityType");
		private final Assignment cEntityAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cEntityAlternatives_0 = (Alternatives)cEntityAssignment.eContents().get(0);
		private final Keyword cEntityExtendKeyword_0_0 = (Keyword)cEntityAlternatives_0.eContents().get(0);
		private final Keyword cEntityImplementKeyword_0_1 = (Keyword)cEntityAlternatives_0.eContents().get(1);
		private final Keyword cEntityDeriveKeyword_0_2 = (Keyword)cEntityAlternatives_0.eContents().get(2);
		private final Keyword cEntityThrowKeyword_0_3 = (Keyword)cEntityAlternatives_0.eContents().get(3);
		private final Keyword cEntityUseannotationKeyword_0_4 = (Keyword)cEntityAlternatives_0.eContents().get(4);
		
		//EntityType:
		//	entity=('extend' | 'implement' | 'derive' | 'throw' | 'useannotation');
		@Override public ParserRule getRule() { return rule; }

		//entity=('extend' | 'implement' | 'derive' | 'throw' | 'useannotation')
		public Assignment getEntityAssignment() { return cEntityAssignment; }

		//('extend' | 'implement' | 'derive' | 'throw' | 'useannotation')
		public Alternatives getEntityAlternatives_0() { return cEntityAlternatives_0; }

		//'extend'
		public Keyword getEntityExtendKeyword_0_0() { return cEntityExtendKeyword_0_0; }

		//'implement'
		public Keyword getEntityImplementKeyword_0_1() { return cEntityImplementKeyword_0_1; }

		//'derive'
		public Keyword getEntityDeriveKeyword_0_2() { return cEntityDeriveKeyword_0_2; }

		//'throw'
		public Keyword getEntityThrowKeyword_0_3() { return cEntityThrowKeyword_0_3; }

		//'useannotation'
		public Keyword getEntityUseannotationKeyword_0_4() { return cEntityUseannotationKeyword_0_4; }
	}
	
	
	private final ModelElements pModel;
	private final DCLStructureElementElements pDCLStructureElement;
	private final DCLManagedSubsystemElements pDCLManagedSubsystem;
	private final DCLManagingSubsystemElements pDCLManagingSubsystem;
	private final DCLMonitorElements pDCLMonitor;
	private final DCLPlannerElements pDCLPlanner;
	private final DCLAnalyzerElements pDCLAnalyzer;
	private final DCLExecutorElements pDCLExecutor;
	private final DCLSensorElements pDCLSensor;
	private final DCLActuatorElements pDCLActuator;
	private final DCLKnowledgeElements pDCLKnowledge;
	private final DCLReferencesElements pDCLReferences;
	private final DCLLayerElements pDCLLayer;
	private final DCLComponentElements pDCLComponent;
	private final DCLComponentInterfaceElements pDCLComponentInterface;
	private final InterfaceTypeElements pInterfaceType;
	private final DCLSubSystemElements pDCLSubSystem;
	private final DCLModuleElements pDCLModule;
	private final DCDeclElements pDCDecl;
	private final OnlyElements pOnly;
	private final CanElements pCan;
	private final CannotElements pCannot;
	private final Only2Elements pOnly2;
	private final MustElements pMust;
	private final ElementTypeElements pElementType;
	private final BasicTypeElements pBasicType;
	private final EntityTypeElements pEntityType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DCLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDCLStructureElement = new DCLStructureElementElements();
		this.pDCLManagedSubsystem = new DCLManagedSubsystemElements();
		this.pDCLManagingSubsystem = new DCLManagingSubsystemElements();
		this.pDCLMonitor = new DCLMonitorElements();
		this.pDCLPlanner = new DCLPlannerElements();
		this.pDCLAnalyzer = new DCLAnalyzerElements();
		this.pDCLExecutor = new DCLExecutorElements();
		this.pDCLSensor = new DCLSensorElements();
		this.pDCLActuator = new DCLActuatorElements();
		this.pDCLKnowledge = new DCLKnowledgeElements();
		this.pDCLReferences = new DCLReferencesElements();
		this.pDCLLayer = new DCLLayerElements();
		this.pDCLComponent = new DCLComponentElements();
		this.pDCLComponentInterface = new DCLComponentInterfaceElements();
		this.pInterfaceType = new InterfaceTypeElements();
		this.pDCLSubSystem = new DCLSubSystemElements();
		this.pDCLModule = new DCLModuleElements();
		this.pDCDecl = new DCDeclElements();
		this.pOnly = new OnlyElements();
		this.pCan = new CanElements();
		this.pCannot = new CannotElements();
		this.pOnly2 = new Only2Elements();
		this.pMust = new MustElements();
		this.pElementType = new ElementTypeElements();
		this.pBasicType = new BasicTypeElements();
		this.pEntityType = new EntityTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.br.terra.dcl.DCL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'architecturalElements' '{' structureElements+=DCLStructureElement+ '}'
	//	'restrictions' '{' dCDecl+=DCDecl* '}';
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//DCLStructureElement:
	//	DCLManagedSubsystem | DCLManagingSubsystem | DCLMonitor | DCLPlanner | DCLAnalyzer | DCLExecutor | DCLSensor |
	//	DCLActuator | DCLKnowledge | DCLReferences | DCLLayer | DCLComponent | DCLSubSystem | DCLModule |
	//	DCLComponentInterface;
	public DCLStructureElementElements getDCLStructureElementAccess() {
		return pDCLStructureElement;
	}
	
	public ParserRule getDCLStructureElementRule() {
		return getDCLStructureElementAccess().getRule();
	}

	//DCLManagedSubsystem:
	//	'managedSubsystem' name=ID (',' 'inManagedSubsystem:' managedSubsystem=[DCLManagedSubsystem])? ';';
	public DCLManagedSubsystemElements getDCLManagedSubsystemAccess() {
		return pDCLManagedSubsystem;
	}
	
	public ParserRule getDCLManagedSubsystemRule() {
		return getDCLManagedSubsystemAccess().getRule();
	}

	//DCLManagingSubsystem:
	//	'managingSubsystem' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
	public DCLManagingSubsystemElements getDCLManagingSubsystemAccess() {
		return pDCLManagingSubsystem;
	}
	
	public ParserRule getDCLManagingSubsystemRule() {
		return getDCLManagingSubsystemAccess().getRule();
	}

	//DCLMonitor:
	//	'monitor' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
	public DCLMonitorElements getDCLMonitorAccess() {
		return pDCLMonitor;
	}
	
	public ParserRule getDCLMonitorRule() {
		return getDCLMonitorAccess().getRule();
	}

	//DCLPlanner:
	//	'planner' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
	public DCLPlannerElements getDCLPlannerAccess() {
		return pDCLPlanner;
	}
	
	public ParserRule getDCLPlannerRule() {
		return getDCLPlannerAccess().getRule();
	}

	//DCLAnalyzer:
	//	'analyzer' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
	public DCLAnalyzerElements getDCLAnalyzerAccess() {
		return pDCLAnalyzer;
	}
	
	public ParserRule getDCLAnalyzerRule() {
		return getDCLAnalyzerAccess().getRule();
	}

	//DCLExecutor:
	//	'executor' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
	public DCLExecutorElements getDCLExecutorAccess() {
		return pDCLExecutor;
	}
	
	public ParserRule getDCLExecutorRule() {
		return getDCLExecutorAccess().getRule();
	}

	//DCLSensor:
	//	'sensor' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
	public DCLSensorElements getDCLSensorAccess() {
		return pDCLSensor;
	}
	
	public ParserRule getDCLSensorRule() {
		return getDCLSensorAccess().getRule();
	}

	//DCLActuator:
	//	'actuator' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
	public DCLActuatorElements getDCLActuatorAccess() {
		return pDCLActuator;
	}
	
	public ParserRule getDCLActuatorRule() {
		return getDCLActuatorAccess().getRule();
	}

	//DCLKnowledge:
	//	'knowledge' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem])? ';';
	public DCLKnowledgeElements getDCLKnowledgeAccess() {
		return pDCLKnowledge;
	}
	
	public ParserRule getDCLKnowledgeRule() {
		return getDCLKnowledgeAccess().getRule();
	}

	//DCLReferences:
	//	'references' name=ID (',' 'inManagingSubsystem:' managingSubsystem=[DCLManagingSubsystem] | ',' 'inKnowledge:'
	//	knowledge=[DCLKnowledge])? ';';
	public DCLReferencesElements getDCLReferencesAccess() {
		return pDCLReferences;
	}
	
	public ParserRule getDCLReferencesRule() {
		return getDCLReferencesAccess().getRule();
	}

	//DCLLayer:
	//	'layer' name=ID ',' 'level' level=INT (',' 'inLayer:' layer=[DCLLayer] | ',' 'inSubSystem:' subSystem=[DCLSubSystem] |
	//	',' 'inComponent:' component=[DCLComponent])? ';';
	public DCLLayerElements getDCLLayerAccess() {
		return pDCLLayer;
	}
	
	public ParserRule getDCLLayerRule() {
		return getDCLLayerAccess().getRule();
	}

	//DCLComponent:
	//	'component' name=ID (',' 'inLayer:' layer=[DCLLayer] | ',' 'inSubSystem:' subSystem=[DCLSubSystem])? ';';
	public DCLComponentElements getDCLComponentAccess() {
		return pDCLComponent;
	}
	
	public ParserRule getDCLComponentRule() {
		return getDCLComponentAccess().getRule();
	}

	//DCLComponentInterface:
	//	'interface' name=ID 'ofComponent' component=[DCLStructureElement] (',' 'type:' interfaceType=InterfaceType) ';';
	public DCLComponentInterfaceElements getDCLComponentInterfaceAccess() {
		return pDCLComponentInterface;
	}
	
	public ParserRule getDCLComponentInterfaceRule() {
		return getDCLComponentInterfaceAccess().getRule();
	}

	//InterfaceType:
	//	interfaceTypeName=('provided' | 'required');
	public InterfaceTypeElements getInterfaceTypeAccess() {
		return pInterfaceType;
	}
	
	public ParserRule getInterfaceTypeRule() {
		return getInterfaceTypeAccess().getRule();
	}

	//DCLSubSystem:
	//	'subSystem' name=ID (',' 'inSubSystem:' subSystem=[DCLSubSystem])? ';';
	public DCLSubSystemElements getDCLSubSystemAccess() {
		return pDCLSubSystem;
	}
	
	public ParserRule getDCLSubSystemRule() {
		return getDCLSubSystemAccess().getRule();
	}

	//DCLModule:
	//	'module' name=ID ';';
	public DCLModuleElements getDCLModuleAccess() {
		return pDCLModule;
	}
	
	public ParserRule getDCLModuleRule() {
		return getDCLModuleAccess().getRule();
	}

	//DCDecl:
	//	only=Only t=[DCLStructureElement] can=Can elementType=ElementType type=[DCLStructureElement] ';' |
	//	t=[DCLStructureElement] cannot=Cannot elementType=ElementType type=[DCLStructureElement] ';' | t=[DCLStructureElement]
	//	can=Can elementType=ElementType type=[DCLStructureElement] ';' | t=[DCLStructureElement] can=Can
	//	elementType=ElementType only2=Only2 type=[DCLStructureElement] ';' | t=[DCLStructureElement] must=Must
	//	entityType=EntityType type=[DCLStructureElement] ';';
	public DCDeclElements getDCDeclAccess() {
		return pDCDecl;
	}
	
	public ParserRule getDCDeclRule() {
		return getDCDeclAccess().getRule();
	}

	//Only:
	//	only='only';
	public OnlyElements getOnlyAccess() {
		return pOnly;
	}
	
	public ParserRule getOnlyRule() {
		return getOnlyAccess().getRule();
	}

	//Can:
	//	can='can-';
	public CanElements getCanAccess() {
		return pCan;
	}
	
	public ParserRule getCanRule() {
		return getCanAccess().getRule();
	}

	//Cannot:
	//	cannot='cannot-';
	public CannotElements getCannotAccess() {
		return pCannot;
	}
	
	public ParserRule getCannotRule() {
		return getCannotAccess().getRule();
	}

	//Only2:
	//	only2='-only';
	public Only2Elements getOnly2Access() {
		return pOnly2;
	}
	
	public ParserRule getOnly2Rule() {
		return getOnly2Access().getRule();
	}

	//Must:
	//	must='must-';
	public MustElements getMustAccess() {
		return pMust;
	}
	
	public ParserRule getMustRule() {
		return getMustAccess().getRule();
	}

	//ElementType:
	//	BasicType | EntityType;
	public ElementTypeElements getElementTypeAccess() {
		return pElementType;
	}
	
	public ParserRule getElementTypeRule() {
		return getElementTypeAccess().getRule();
	}

	//BasicType:
	//	typeName=('access' | 'declare' | 'handle' | 'create' | 'depend');
	public BasicTypeElements getBasicTypeAccess() {
		return pBasicType;
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//EntityType:
	//	entity=('extend' | 'implement' | 'derive' | 'throw' | 'useannotation');
	public EntityTypeElements getEntityTypeAccess() {
		return pEntityType;
	}
	
	public ParserRule getEntityTypeRule() {
		return getEntityTypeAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
